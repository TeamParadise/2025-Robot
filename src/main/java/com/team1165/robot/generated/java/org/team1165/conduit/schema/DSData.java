/*
 * Copyright (c) 2025 Team Paradise - FRC 1165 (https://github.com/TeamParadise)
 *
 * Use of this source code is governed by the MIT License, which can be found in the LICENSE file at
 * the root directory of this project.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package com.team1165.robot.generated.java.org.team1165.conduit.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Struct;
import java.nio.ByteBuffer;

@SuppressWarnings("unused")
public final class DSData extends Struct {
  public void __init(int _i, ByteBuffer _bb) {
    __reset(_i, _bb);
  }

  public DSData __assign(int _i, ByteBuffer _bb) {
    __init(_i, _bb);
    return this;
  }

  public int allianceStation() {
    return bb.getInt(bb_pos + 0);
  }

  public void mutateAllianceStation(int alliance_station) {
    bb.putInt(bb_pos + 0, alliance_station);
  }

  public int eventName(int j) {
    return bb.get(bb_pos + 4 + j * 1);
  }

  public void mutateEventName(int j, int event_name) {
    bb.put(bb_pos + 4 + j * 1, (byte) event_name);
  }

  public int gameSpecificMessageSize() {
    return bb.getShort(bb_pos + 68) & 0xFFFF;
  }

  public void mutateGameSpecificMessageSize(int game_specific_message_size) {
    bb.putShort(bb_pos + 68, (short) game_specific_message_size);
  }

  public int gameSpecificMessage(int j) {
    return bb.get(bb_pos + 70 + j * 1);
  }

  public void mutateGameSpecificMessage(int j, int game_specific_message) {
    bb.put(bb_pos + 70 + j * 1, (byte) game_specific_message);
  }

  public int matchNumber() {
    return bb.getShort(bb_pos + 134) & 0xFFFF;
  }

  public void mutateMatchNumber(int match_number) {
    bb.putShort(bb_pos + 134, (short) match_number);
  }

  public int replayNumber() {
    return bb.get(bb_pos + 136) & 0xFF;
  }

  public void mutateReplayNumber(int replay_number) {
    bb.put(bb_pos + 136, (byte) replay_number);
  }

  public int matchType() {
    return bb.getInt(bb_pos + 140);
  }

  public void mutateMatchType(int match_type) {
    bb.putInt(bb_pos + 140, match_type);
  }

  public int controlWord() {
    return bb.getInt(bb_pos + 144);
  }

  public void mutateControlWord(int control_word) {
    bb.putInt(bb_pos + 144, control_word);
  }

  public double matchTime() {
    return bb.getDouble(bb_pos + 152);
  }

  public void mutateMatchTime(double match_time) {
    bb.putDouble(bb_pos + 152, match_time);
  }

  public com.team1165.robot.generated.java.org.team1165.conduit.schema.Joystick joysticks(int j) {
    return joysticks(
        new com.team1165.robot.generated.java.org.team1165.conduit.schema.Joystick(), j);
  }

  public com.team1165.robot.generated.java.org.team1165.conduit.schema.Joystick joysticks(
      com.team1165.robot.generated.java.org.team1165.conduit.schema.Joystick obj, int j) {
    return obj.__assign(bb_pos + 160 + j * 356, bb);
  }

  public static int createDSData(
      FlatBufferBuilder builder,
      int allianceStation,
      int[] eventName,
      int gameSpecificMessageSize,
      int[] gameSpecificMessage,
      int matchNumber,
      int replayNumber,
      int matchType,
      int controlWord,
      double matchTime,
      int[][] joysticks_name,
      int[] joysticks_type,
      short[] joysticks_axisCount,
      int[][] joysticks_axisTypes,
      float[][] joysticks_axisValues,
      int[] joysticks_buttonCount,
      int[] joysticks_buttons,
      short[] joysticks_povCount,
      short[][] joysticks_povValues,
      boolean[] joysticks_isXbox) {
    builder.prep(8, 2296);
    for (int _idx0 = 6; _idx0 > 0; _idx0--) {
      builder.prep(4, 356);
      builder.pad(1);
      builder.putBoolean(joysticks_isXbox[_idx0 - 1]);
      for (int _idx1 = 12; _idx1 > 0; _idx1--) {
        builder.putShort(joysticks_povValues[_idx0 - 1][_idx1 - 1]);
      }
      builder.putShort(joysticks_povCount[_idx0 - 1]);
      builder.putInt(joysticks_buttons[_idx0 - 1]);
      builder.pad(3);
      builder.putByte((byte) joysticks_buttonCount[_idx0 - 1]);
      for (int _idx1 = 12; _idx1 > 0; _idx1--) {
        builder.putFloat(joysticks_axisValues[_idx0 - 1][_idx1 - 1]);
      }
      for (int _idx1 = 12; _idx1 > 0; _idx1--) {
        builder.putByte((byte) joysticks_axisTypes[_idx0 - 1][_idx1 - 1]);
      }
      builder.putShort(joysticks_axisCount[_idx0 - 1]);
      builder.pad(1);
      builder.putByte((byte) joysticks_type[_idx0 - 1]);
      for (int _idx1 = 256; _idx1 > 0; _idx1--) {
        builder.putByte((byte) joysticks_name[_idx0 - 1][_idx1 - 1]);
      }
    }
    builder.putDouble(matchTime);
    builder.pad(4);
    builder.putInt(controlWord);
    builder.putInt(matchType);
    builder.pad(3);
    builder.putByte((byte) replayNumber);
    builder.putShort((short) matchNumber);
    for (int _idx0 = 64; _idx0 > 0; _idx0--) {
      builder.putByte((byte) gameSpecificMessage[_idx0 - 1]);
    }
    builder.putShort((short) gameSpecificMessageSize);
    for (int _idx0 = 64; _idx0 > 0; _idx0--) {
      builder.putByte((byte) eventName[_idx0 - 1]);
    }
    builder.putInt(allianceStation);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
      __reset(_vector, _element_size, _bb);
      return this;
    }

    public DSData get(int j) {
      return get(new DSData(), j);
    }

    public DSData get(DSData obj, int j) {
      return obj.__assign(__element(j), bb);
    }
  }
}
