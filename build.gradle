// Plugins loaded to automatically format code, alongside other improvements.
plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2025.2.1"
    id "com.diffplug.spotless" version "6.25.0"
    id "com.peterabeles.gversion" version "1.10.3"
    id "net.ltgt.errorprone" version "4.1.0"
}

def final javaVersion = JavaVersion.VERSION_17
def final robotPackage = "com.team1165.robot"
def final robotMainClass = robotPackage + ".Main"

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils, and ran on deploy.
deploy {
    targets {
        roborio(getTargetTypeClass("RoboRIO")) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type.
                // getArtifactTypeClass is a shortcut to get the class type using a string.
                frcJava(getArtifactTypeClass("FRCJavaArtifact")) {
                    // Add GC changes that should improve performance, used in Mechanical Advantage AdvantageKit examples.
                    final maxJavaHeapSizeMb = 100;
                    jvmArgs.addAll([
                        "-XX:+UnlockExperimentalVMOptions",
                        "-XX:GCTimeRatio=5",
                        "-XX:+UseSerialGC",
                        "-XX:MaxGCPauseMillis=50",
                        "-Xmx" + maxJavaHeapSizeMb + "M",
                        "-Xms" + maxJavaHeapSizeMb + "M",
                        "-XX:+AlwaysPreTouch"
                    ]);

                    // Run "./gradlew deploy -PprofilingMode" to run with profiling mode enabled.
                    // Check to see if profiling mode is enabled for remote performance profiling.
                    project.logger.lifecycle("Checking if performance profiling is enabled...")
                    if (frc.project.hasProperty("profilingMode")) {
                        project.logger.lifecycle("Performance profiling mode is enabled!")
                        project.logger.lifecycle("Connect JMX client to roborio-" + team + "-frc.local:1198 or " + "10." + (team / 100) + ".2" + ":1198 for roboRIO performance profiling.")
                        jvmArgs.addAll([
                            "-Dcom.sun.management.jmxremote=true",
                            "-Dcom.sun.management.jmxremote.port=1198",
                            "-Dcom.sun.management.jmxremote.local.only=false",
                            "-Dcom.sun.management.jmxremote.ssl=false",
                            "-Dcom.sun.management.jmxremote.authenticate=false",
                            "-Djava.rmi.server.hostname=10." + (team / 100) + ".2"
                        ])
                    }
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass("FileTreeArtifact")) {
                    predeploy << { execute "rm -rf /home/lvuser/deploy" }
                    files = project.fileTree("src/main/deploy")
                    directory = "/home/lvuser/deploy"
                    // Set to true to delete deployed files by default.
                    deleteOldFiles = true
                }
            }
        }
    }
}

// This is run when the robot code is being simulated.
simulateJavaRelease {
    // Run "./gradlew simulateJava -PreplayMode" to run with replay mode enabled.
    // Check to see if replay mode is enabled.
    project.logger.lifecycle("Checking if AdvantageKit replay mode is enabled...")
    if (frc.project.hasProperty("replayMode")) {
        project.logger.lifecycle("Replay mode is enabled!")
        args '--replay'
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava
// Set to true to use debug for JNI.
wpi.java.debugJni = false

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation 'com.google.errorprone:error_prone_annotations:2.36.0'
    errorprone('com.google.errorprone:error_prone_core:2.36.0')

    testImplementation "org.junit.jupiter:junit-jupiter:5.11.4"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.11.4"

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty "junit.jupiter.extensions.autodetection.enabled", "true"
}

// Simulation configuration (e.g. environment variables).
// This enables both the GUI and Driver Station simulation support.
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation().defaultEnabled = true

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(robotMainClass)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile).configureEach {
    // Configure string concat to always inline compile
    options.compilerArgs.add "-XDstringConcat=inline"
    options.errorprone.enabled = true
    options.errorprone.excludedPaths = '.*/build/generated/.*'
}

// Configure JetBrains IntelliJ IDEA support.
idea {
    project {
        // The project.sourceCompatibility setting is not always picked up, so we set explicitly.
        languageLevel = javaVersion
    }
    module {
        // Improve development & (especially) debugging experience (and IDEA's capabilities) by having libraries' source & javadoc attached.
        downloadJavadoc = true
        downloadSources = true
        // Exclude the .vscode directory from indexing and search.
        excludeDirs += file(".vscode")
    }
}

// Configure Mechanical Advantage's AdvantageKit.
repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    mavenLocal()
}

// Add replay watch task for AdvantageKit.
tasks.register('replayWatch', JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

// Create BuildConstants file using gversion.
project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir = "src/main/java/"
    classPackage = robotPackage
    className = "BuildConstants"
    dateFormat = "yyyy-MM-dd HH:mm:ss z"
    timeZone = "America/Phoenix"
    indent = "  "
}

// Create a task to make a new commit if we are currently at an event (based on branch starting with "event").
tasks.register("eventDeploy") {
    doLast {
        if (project.gradle.startParameter.taskNames.any({ it.toLowerCase().contains("deploy") })) {
            def branchPrefix = "event"
            def branch = "git branch --show-current".execute().text.trim()
            def commitMessage = "Update at '${new Date().toString()}'"

            if (branch.startsWith(branchPrefix)) {
                exec {
                    workingDir(projectDir)
                    executable "git"
                    args "add", "-A"
                }
                exec {
                    workingDir(projectDir)
                    executable "git"
                    args "commit", "-m", commitMessage
                    ignoreExitValue = true
                }

                println "Committed to branch: '$branch'"
                println "Commit message: '$commitMessage'"
            } else {
                println "Not on an event branch, skipping commit."
            }
        } else {
            println "Not running deploy task, skipping commit."
        }
    }
}
createVersionFile.dependsOn(eventDeploy)

// Configure Spotless code formatting.
project.compileJava.dependsOn(spotlessApply)
spotless {
    java {
        target fileTree(".") {
            include "src/**/*.java"
            exclude "**/build/**", "**/build-*/**", "src/main/java/" + robotPackage.replaceAll("\\.", "/") + "/BuildConstants.java"
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**"
        }
        gson().indentWithSpaces(2)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**"
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
